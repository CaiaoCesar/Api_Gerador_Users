# #10 - API REST

# ‚úçÔ∏è Instru√ß√µes para a atividade

O objetivo desta atividade √© que voc√™ utilize uma API p√∫blica dispon√≠vel e crie um Front-End que consuma essa API.  

### üìÅ Estrutura dos arquivos

1. Crie um novo reposit√≥rio p√∫blico no GitHub
    - O README.md do reposit√≥rio deve conter:
        - Seu nome completo
        - Descri√ß√£o e Objetivo do projeto (destacando a API p√∫blica escolhida)
        - Tecnologias utilizadas (voc√™ pode escolher a *stack* que quiser)
        - Tabela com exemplos das requisi√ß√µes utilizadas em cada p√°gina. Ex.:
            
                                   **P√°gina            | Tipo requisi√ß√£o | endpoint**
            
                                   index.html     | GET                      | posts/
            
                                   delete.html    | DELETE               | posts/
            
        - Cr√©ditos - Fontes de refer√™ncia utilizadas

### üí° O projeto

1. Voc√™ pode escolher qualquer API p√∫blica para desenvolver o seu projeto ou criar a sua pr√≥pria ‚ÄúFake-API‚Äù utilizando por exemplo o https://github.com/typicode/json-server. Algumas listas com APIs que podem ser utilizadas:
    - https://github.com/public-apis/public-apis
    - https://github.com/APIs-guru/openapi-directory
    - https://github.com/toddmotto/public-apis
2. Requisitos m√≠nimos
    - O seu projeto deve conter no m√≠nimo 3 p√°ginas.
    - A p√°gina principal do projeto deve ser **`index.html`** na raiz do projeto.
    - Todo o c√≥digo CSS deve estar no arquivo **`css/estilo.css`**
    - Todo o c√≥digo JS deve estar no arquivo **`js/main.js`**
    - O seu projeto deve conter images provenientes da API.
    - Utilize pelo menos 2 m√©todos de requisi√ß√£o (GET, POST, PUT, DELETE).

### üèÅ¬†Entregando a atividade

1. Responda a atividade **#10 no Classroom** com:
    - O link para o reposit√≥rio.
    - O link com o endere√ßo do seu projeto publicado na internet.

### üíØ¬†Avalia√ß√£o

- Relev√¢ncia
- Usabilidade -  Design e Organiza√ß√£o/Padroniza√ß√£o.
- Funcionamento/Completude
- Documenta√ß√£o - Relato de implementa√ß√£o

Ideias:
Estrutura do Projeto com ReqRes API
1Ô∏è‚É£ index.html ‚Äì Lista de Usu√°rios (GET)
Fun√ß√£o: P√°gina principal que exibe usu√°rios paginados.

Endpoint: GET https://reqres.in/api/users?page=1

Recursos da API usados:

Listar usu√°rios (com foto de avatar padr√£o da ReqRes ou complementada com DiceBear).

Bot√£o "Pr√≥xima p√°gina" que redireciona para next.html.

Layout Sugerido:

Card para cada usu√°rio (imagem + nome + e-mail).

Bot√£o "Ver detalhes" (leva para next.html com par√¢metro ?id=1).

Pagina√ß√£o simples (ou bot√£o "Pr√≥xima p√°gina" ‚Üí next.html?page=2).

2Ô∏è‚É£ next.html ‚Äì Detalhes do Usu√°rio + Edi√ß√£o (GET + PUT/PATCH)
Fun√ß√£o: Mostra detalhes de um usu√°rio espec√≠fico e permite edi√ß√£o.


Recursos da API usados:

Busca por ID (par√¢metro da URL, ex: next.html?id=2).

Formul√°rio para editar nome/e-mail (simula PUT/PATCH).

Layout Sugerido:

Foto do usu√°rio (avatar).

Formul√°rio de edi√ß√£o (nome, e-mail).

Bot√£o "Salvar" (simula PUT/PATCH).

Link para voltar √† index.html.

3Ô∏è‚É£ sobre.html ‚Äì P√°gina Est√°tica + Criar Usu√°rio (POST)
Fun√ß√£o:

Parte est√°tica: Explica o projeto e a API usada.

Parte din√¢mica: Formul√°rio para criar novo usu√°rio (simulando POST).

Endpoint: POST https://reqres.in/api/users

Recursos da API usados:

Cria√ß√£o de usu√°rio fict√≠cio (a API n√£o persiste dados, mas simula a resposta).

Exemplo de c√≥digo:

Se√ß√£o "Sobre o Projeto" (texto explicativo).

Formul√°rio de cadastro (nome + bot√£o "Criar").

Link para index.html.

‚úÖ Como Fica a Estrutura Final:
P√°gina	     M√©todos HTTP	        Funcionalidade	                 Endpoint
index.html  	GET	            Lista usu√°rios paginados	            /api/users?page=1
next.html	    GET + PUT	    Detalhes e edi√ß√£o de usu√°rio	        /api/users/2
sobre.html	    POST	C       riar novo usu√°rio + info projeto	    /api/users

üí° Dicas Extras:
Use localStorage para simular persist√™ncia (ex: salvar usu√°rios "criados").

Adicione um spinner durante carregamento das requisi√ß√µes.

Trate erros (ex: usu√°rio n√£o encontrado em next.html).

Incremente com imagens:

Use user.avatar (ReqRes) ou combine com DiceBear como mostrado acima.